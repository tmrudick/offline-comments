<!doctype html>
<html>
  <head>
    <title>Fractional Calculator Checkpoint 1</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.7.0/codemirror.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.7.0/theme/eclipse.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.7.0/codemirror.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.7.0/mode/clike/clike.js"></script>
    <style type="text/css">
      html,body,#container { margin: 0; padding: 0; height: 100%;}
      h1,h2 { margin: 0;}
      #header {
        font-family: Helvetica, Arial, sans-serif;
        background: #eee;
        color: #444;
        padding: 25px;
      }
      .hidden { display: none; }
      .comment { width: 100%; border: 1px solid black; padding: 2px;}
      .comment input { display: block; width: 98%;}
      .CodeMirror {border: 1px solid black; font-size:13px; height: 100%; margin: 25px;}
    </style>
  </head>
  <body>
    <div id="header">
      <h1>{{ project }}</h1>
      <h2>{{ student }}</h2>
    </div>
    <div id="container">
      <textarea id="code">
{{ code }}
      </textarea>
      <div class="hidden">
      <div class="comment" id="editable-template">
        <input type="text" />
        <button>Remove</button>
      </div>
      <div class="comment" id="readonly-template">
        <p></p>
      </div>
    </div>
    </div>
    <script>
      (function Comment() {
        // Create editor for Java files
        var editor = CodeMirror.fromTextArea(document.querySelector("#code"), 
        {
          lineNumbers: true,
          theme: 'eclipse',
          readOnly: true,
          mode: 'text/x-java'
        });

        // Server-generated variables
        var autosaveTimeout = null,
          id = {{ id }},
          commenting = {{ commenting }},
          comments = JSON.parse({{{ comments }}});

        for (var key in comments) {
          addComment(+key, comments[key]);
        }

        if (commenting) {
          editor.on('gutterClick', function(n, line) {
            addComment(line);
          });
        }

        function addComment(line, text) {
          var element = document.querySelector(text ? '#readonly-template' : '#editable-template').cloneNode(true);
          element.id = '';
          var widget = editor.addLineWidget(line, element);

          if (text) {
            element.querySelector('p').innerText = text;
          } else {
            element.querySelector('button').addEventListener('click', function() {
              widget.clear();
              delete comments[line];
            });
            element.querySelector('input').addEventListener('keyup', function() {
              comments[line] = this.value;
              clearTimeout(autosaveTimeout);
              autosaveTimeout = setTimeout(function() {
                save();
              }, 500);
            });
          }
        }

        function save() {
          var xhr = new XMLHttpRequest();
          xhr.open('POST', '/review/' + id, true);
          xhr.send(JSON.stringify(comments));
        }
      })();
    </script>
  </body>
</html>